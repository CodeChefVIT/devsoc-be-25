openapi: 3.0.0
info:
  title: Devsoc Backend API
  description: The API for the DevSoc 25 hackathon backend
  version: 1.0.0
servers:
  - url: https://salad.codechefvit.com

tags:
  - name: Admin
    description: Admin operations
  - name: Submission
    description: Submission operations
  - name: Authentication
    description: Authentication operations
  - name: User Information
    description: Information operations

paths:
  /admin/users?limit={limit}&cursor={id}&name={name}:
    get:
      tags:
        - Admin
      summary: List all users
      parameters:
        - name: limit
          in: query
          description: The number of users to fetch. Required for the first request.
          required: false
          schema:
            type: integer
            example: 10
        - name: cursor
          in: query
          description: The Base64-encoded cursor representing the last user ID from the previous page.
          required: false
          schema:
            type: string
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        example: Invalid UUID for cursor
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to fetch users
                      error:
                        type: string
                        example: Database query failed

  /admin/users/{email}:
    get:
      tags:
        - Admin
      summary: Get user by email
      description: Fetch user details by their email address.
      parameters:
        - name: email
          in: path
          description: The email address of the user to fetch.
          required: true
          schema:
            type: string
            format: email
            example: user@example.com
      responses:
        "200":
          description: Successfully fetched the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User fetched successfully
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                            example: "550e8400-e29b-41d4-a716-446655440000"
                          email:
                            type: string
                            format: email
                            example: user@example.com
                          name:
                            type: string
                            example: John Doe
                          created_at:
                            type: string
                            format: date-time
                            example: "2025-01-01T12:00:00Z"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User not found
                      error:
                        type: string
                        example: sql no rows in result set
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Some error occurred
                      error:
                        type: string
                        example: Database query failed

  /admin/ban:
    post:
      tags:
        - Admin
      summary: Ban a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BanUserReq"
      responses:
        "201":
          description: User banned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User banned successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to ban user
                      error:
                        type: string
                        example: "Detailed error message"
  /admin/unban:
    post:
      tags:
        - Admin
      summary: Unban a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BanUserReq"
      responses:
        "201":
          description: User unbanned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User unbanned successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Failed to unban user
                      error:
                        type: string
                        example: "Detailed error message"
  /admin/team/rounds:
    post:
      summary: Update Team Rounds
      description: Updates the round information for a specific team.
      tags:
        - Team Management
      requestBody:
        description: Object containing team ID and updated round information.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                teamId:
                  type: string
                  description: The unique identifier of the team.
                  example: "team123"
                round:
                  type: integer
                  description: The updated round number for the team.
                  example: 3
      responses:
        "200":
          description: Team round updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Team round updated successfully."
        "400":
          description: Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid team ID or round data."
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "An error occurred while updating the team round."

  admin/teams?limit={limit}&cursor={id}&name={name}:
    get:
      tags:
        - Admin
      summary: Get a list of teams
      description: Fetches teams with optional pagination and filtering by name.
      parameters:
        - name: limit
          in: query
          description: Number of teams to fetch (pagination limit)
          required: true
          schema:
            type: integer
            example: 10
        - name: cursor
          in: query
          description: Cursor for pagination (UUID of the last fetched item)
          required: false
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
        - name: name
          in: query
          description: Filter teams by name
          required: false
          schema:
            type: string
            example: "Warriors"
      responses:
        "200":
          description: Successful response with a list of teams
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Teams fetched successfully"
                      teams:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                              example: "550e8400-e29b-41d4-a716-446655440000"
                            name:
                              type: string
                              example: "Warriors"
                            created_at:
                              type: string
                              format: date-time
                              example: "2024-01-31T12:00:00Z"
        "400":
          description: Invalid cursor UUID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid UUID for cursor"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Database error"

  /admin/teams/{id}:
    get:
      tags:
        - Admin
      summary: Get a team by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: uuid
      responses:
        "200":
          description: A single team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teams"
        "404":
          description: Team not found
  /admin/teams/leader/{id}:
    get:
      tags:
        - Admin
      summary: Get the team leader by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: uuid
      responses:
        "200":
          description: Team leader
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Team leader not found

  /admin/members/{id}:
    get:
      tags:
        - Admin
      summary: Get all team members
      description: Retrieve all members of a team using the team ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The UUID of the team.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved team members.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        FirstName:
                          type: string
                          description: First name of the team member.
                        LastName:
                          type: string
                          description: Last name of the team member.
                        GithubProfile:
                          type: string
                          description: GitHub profile URL of the team member.
                        VitEmail:
                          type: string
                          description: VIT email of the team member.
                        RegNo:
                          type: string
                          description: Registration number of the team member.
                        PhoneNo:
                          type: string
                          description: Phone number of the team member.
        "400":
          description: Failed to retrieve team members.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  data:
                    type: string
                    example: Cannot get Members of the team

  /submission:
    post:
      tags:
        - Submission
      summary: Create a new submission
      description: Create a submission for a team with required project links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - track
                - github_link
                - figma_link
                - team_id
              properties:
                title:
                  type: string
                description:
                  type: string
                track:
                  type: string
                github_link:
                  type: string
                  format: url
                figma_link:
                  type: string
                  format: url
                other_link:
                  type: string
                  format: url
                team_id:
                  type: string
                  format: uuid
              $ref: "#/components/schemas/CreateSubmissionRequest"
      responses:
        201:
          description: Submission created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      title:
                        type: string
                      description:
                        type: string
                      track:
                        type: string
                      github_link:
                        type: string
                        format: url
                      figma_link:
                        type: string
                        format: url
                      other_link:
                        type: string
                        format: url
                      team_id:
                        type: string
                        format: uuid
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /create/idea:
    post:
      tags:
        - Idea
      summary: Create new idea
      description: Creates a new idea for a team, accessible only by team leaders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIdeaRequest"
      responses:
        201:
          description: Idea created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Idea created successfully"
                      error:
                        type: string
                        nullable: true
                    $ref: "#/components/schemas/Submission"
        400:
          description: Invalid request or invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden - User does not belong to a team or is not a team leader
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        409:
          description: Conflict - An idea already exists for this team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error - Failed to create idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /idea/update/{id}:
    put:
      tags:
        - Idea
      summary: Update an existing idea
      description: Updates an idea for the team. Only team leaders can update ideas, and the team must match the idea's team.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the idea to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIdeaParams"
      responses:
        200:
          description: Idea updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Idea updated successfully"
        400:
          description: Invalid ID format or invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden - User does not belong to a team, is not a leader, or the team's ID does not match the idea's team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Idea not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error - Failed to update idea
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /idea:
    get:
      tags:
        - Idea
      summary: Get ideas for the current team
      description: Fetches all ideas related to the user's team. Only users who belong to a team can access the ideas.
      responses:
        200:
          description: Ideas fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Ideas fetched successfully"
                      ideas:
                        type: array
                        items:
                          $ref: "#/components/schemas/GetIdeaByTeamIDRow"
        403:
          description: Forbidden - User does not belong to any team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Internal Server Error - Failed to fetch ideas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /submission/get:
    get:
      tags:
        - Submission
      summary: Get submission for a team
      description: Retrieves the submission details for a specific team
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the team
      responses:
        200:
          description: Submission retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      title:
                        type: string
                      description:
                        type: string
                      track:
                        type: string
                      github_link:
                        type: string
                        format: url
                      figma_link:
                        type: string
                        format: url
                      other_link:
                        type: string
                        format: url
                      team_id:
                        type: string
                        format: uuid
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Invalid user
                          - Invalid team ID format
                          - User is not part of any team
                          - User is not part of the team
  /submission/update:
    post:
      tags:
        - Submission
      summary: Update an existing submission
      description: Update submission details for a specific team
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the team whose submission to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                github_link:
                  type: string
                  format: url
                figma_link:
                  type: string
                  format: url
                ppt_link:
                  type: string
                  format: url
                other_link:
                  type: string
                  format: url
      responses:
        200:
          description: Submission updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      title:
                        type: string
                      description:
                        type: string
                      track:
                        type: string
                      github_link:
                        type: string
                        format: url
                      figma_link:
                        type: string
                        format: url
                      other_link:
                        type: string
                        format: url
                      team_id:
                        type: string
                        format: uuid
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  data:
                    type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - Invalid request body
                          - Invalid team ID format
                          - User is not part of any team
                          - Invalid user
                          - User is not part of the team
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account, sends verification OTP and returns authentication tokens as cookies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: User registered successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: |
                  jwt=<token>; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600
                  refresh_token=<token>; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=7200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  message:
                    type: string
                    example: User signed up successfully. OTP has been sent to email
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  message:
                    type: string
              examples:
                invalidBody:
                  value:
                    status: fail
                    message: Invalid request body
                validationError:
                  value:
                    status: fail
                    message: Validation errors
                    data:
                      email: must be a valid email
                      password: is required
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  message:
                    type: string
                    example: User with this email already exists
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [fail]
                  message:
                    type: string
              examples:
                databaseError:
                  value:
                    status: fail
                    message: Database error
                uuidError:
                  value:
                    status: fail
                    message: Failed to generate user ID
                hashError:
                  value:
                    status: fail
                    message: Failed to hash password
                createError:
                  value:
                    status: fail
                    message: Failed to create user
                otpError:
                  value:
                    status: fail
                    message: Failed to generate OTP
                tokenError:
                  value:
                    status: fail
                    message: Failed to generate token
                refreshTokenError:
                  value:
                    status: fail
                    message: Failed to generate refresh token
  /auth/complete-profile:
    post:
      tags:
        - Authentication
      summary: Complete user profile
      description: Complete user profile with additional details after registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - phone_no
                - gender
                - reg_no
                - vit_email
                - hostel_block
                - room_no
                - github_profile
              properties:
                first_name:
                  type: string
                  minLength: 1
                last_name:
                  type: string
                  minLength: 1
                phone_no:
                  type: string
                  minLength: 10
                  maxLength: 10
                gender:
                  type: string
                  enum: [M, F, O]
                  description: Must be either M, F or O
                reg_no:
                  type: string
                vit_email:
                  type: string
                  format: email
                  pattern: "@vitstudent.ac.in$"
                hostel_block:
                  type: string
                room_no:
                  type: integer
                  minimum: 1
                github_profile:
                  type: string
                  format: uri
      responses:
        "200":
          description: Profile completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Profile completed successfully
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                invalidBody:
                  value:
                    status: fail
                    message: Invalid request body
                validationError:
                  value:
                    status: fail
                    message: Validation errors
                    data:
                      first_name: is required
                      last_name: is required
                      phone_no: is required
                      gender: is required
                      reg_no: is required
                      vit_email: is required
                      hostel_block: is required
                      room_no: is required
                      github_profile: is required
                emptyName:
                  value:
                    status: fail
                    message: First name and last name cannot be empty
                invalidGender:
                  value:
                    status: fail
                    message: Gender must be M, F or O
                alreadyComplete:
                  value:
                    status: fail
                    message: Profile already completed
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not verified. OTP has been sent to email
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                vitEmailExists:
                  value:
                    status: fail
                    message: User with this VIT email already exists
                phoneOrRegNoExists:
                  value:
                    status: fail
                    message: User with this phone number or registration number already exists
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                databaseError:
                  value:
                    status: fail
                    message: Database error
                userError:
                  value:
                    status: fail
                    message: Failed to get user
                otpError:
                  value:
                    status: fail
                    message: Failed to generate OTP
                updateError:
                  value:
                    status: fail
                    message: Failed to complete profile
  /auth/verify-otp:
    post:
      tags:
        - Authentication
      summary: Verify user email using OTP
      description: Validates the OTP sent to user's email during signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  format: email
                otp:
                  type: string
                  description: One-time password sent to email
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User verified successfully
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                invalidBody:
                  value:
                    status: fail
                    message: Invalid request body
                validationError:
                  value:
                    status: fail
                    message: Validation errors
                    data:
                      email: must be a valid email
                      otp: is required
                alreadyVerified:
                  value:
                    status: fail
                    message: User already verified
        "401":
          description: Unauthorized - Invalid OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Invalid OTP
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                userNotFound:
                  value:
                    status: fail
                    message: User not found
                otpExpired:
                  value:
                    status: fail
                    message: OTP invalid/expired
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                databaseError:
                  value:
                    status: fail
                    message: Failed to get user
                redisError:
                  value:
                    status: fail
                    message: Failed to delete OTP
                verifyError:
                  value:
                    status: fail
                    message: Failed to verify user
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticates user with email and password, sends OTP if unverified
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Login successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: |
                  jwt=<token>; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600
                  refresh_token=<token>; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=7200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User logged in successfully
                  data:
                    type: object
                    properties:
                      is_profile_complete:
                        type: boolean
                        example: false
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                invalidBody:
                  value:
                    status: fail
                    message: Invalid request body
                validationError:
                  value:
                    status: fail
                    message: Validation errors
                    data:
                      email: must be a valid email
                      password: is required
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Invalid password
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        "417":
          description: Expectation Failed - User not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not verified. OTP has been sent to email
        "418":
          description: I'm a teapot - User banned
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User banned
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                databaseError:
                  value:
                    status: fail
                    message: Failed to get user
                otpError:
                  value:
                    status: fail
                    message: Failed to generate OTP
                tokenError:
                  value:
                    status: fail
                    message: Failed to generate token
                refreshTokenError:
                  value:
                    status: fail
                    message: Failed to generate refresh token
  /auth/update-password:
    post:
      tags:
        - Authentication
      summary: Update user password
      description: Updates user password after OTP verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - new_password
              properties:
                email:
                  type: string
                  format: email
                otp:
                  type: string
                  description: One-time password sent to email
                new_password:
                  type: string
                  format: password
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Password updated successfully
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                invalidBody:
                  value:
                    status: fail
                    message: Invalid request body
                validationError:
                  value:
                    status: fail
                    message: Validation errors
                    data:
                      email: must be a valid email
                      otp: is required
                      new_password: is required
                invalidOTP:
                  value:
                    status: fail
                    message: Invalid OTP
                expiredOTP:
                  value:
                    status: fail
                    message: OTP expired or invalid
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                databaseError:
                  value:
                    status: fail
                    message: Failed to get user
                redisError:
                  value:
                    status: fail
                    message: Failed to delete OTP
                hashError:
                  value:
                    status: fail
                    message: Failed to hash password
                updateError:
                  value:
                    status: fail
                    message: Failed to update password
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Generate new access and refresh tokens using refresh token
      parameters:
        - in: cookie
          name: refresh_token
          required: true
          schema:
            type: string
          description: Refresh token cookie
      responses:
        "200":
          description: Tokens refreshed successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: |
                  jwt=<token>; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=3600
                  refresh_token=<token>; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=7200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Token refreshed successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                noToken:
                  value:
                    status: fail
                    message: Refresh token not found
                invalidToken:
                  value:
                    status: fail
                    message: Invalid refresh token
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
              examples:
                tokenError:
                  value:
                    status: fail
                    message: Failed to generate token
                refreshTokenError:
                  value:
                    status: fail
                    message: Failed to generate refresh token
  /auth/star:
    get:
      tags:
        - Authentication
      summary: Check if a GitHub user has starred a specific repository
      description: Verifies whether a given GitHub user has starred a specific repository
      responses:
        200:
          description: User has starred the repository
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: string
                    example: "user has starred the repo"

        417:
          description: User has not starred the repository
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  data:
                    type: string
                    example: "user has not starred. Please star the repository"

        400:
          description: Invalid GitHub link
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  data:
                    type: string
                    example: "error invalid github link"

        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  data:
                    type: string
                    example: "error creating request"
  /auth/github:
    post:
      summary: Update GitHub Profile
      description: Updates the GitHub profile URL of the authenticated user.
      operationId: updateGithubProfile
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                github:
                  type: string
                  format: uri
                  description: The GitHub profile URL to update
              required:
                - github
            examples:
              validRequest:
                value:
                  github: "https://github.com/example-user"
      responses:
        "202":
          description: GitHub profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User github updated successfully
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Invalid request body
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: unauthorized
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: DB error [failed to update the github_link]
  /info/me:
    get:
      tags:
        - User Information
      summary: Get user and team details
      description: Fetch authenticated user's details along with their team information
      responses:
        "200":
          description: User and team details fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User details fetched successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          first_name:
                            type: string
                          last_name:
                            type: string
                          email:
                            type: string
                            format: email
                          reg_no:
                            type: string
                          phone_no:
                            type: string
                          gender:
                            type: string
                            enum: [M, F, O]
                          vit_email:
                            type: string
                            format: email
                          hostel_block:
                            type: string
                          room_no:
                            type: integer
                          github_profile:
                            type: string
                            format: uri
                          is_leader:
                            type: boolean
                      team:
                        type: object
                        properties:
                          team_name:
                            type: string
                          number_of_people:
                            type: integer
                          round_qualified:
                            type: integer
                          code:
                            type: string
                          members:
                            type: array
                            items:
                              type: object
                              properties:
                                first_name:
                                  type: string
                                last_name:
                                  type: string
                                email:
                                  type: string
                                  format: email
                                phone_no:
                                  type: string
                                github_profile:
                                  type: string
                                  format: uri
                                is_leader:
                                  type: boolean
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                  data:
                    type: object
                    nullable: true
              examples:
                notAuthenticated:
                  value:
                    status: fail
                    message: User not found
                    data: null
                noTeam:
                  value:
                    status: fail
                    message: User is not part of any team
                    data: null
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Failed to fetch user details
                  data:
                    type: object
                    nullable: true
    post:
      tags:
        - User Information
      summary: Update user details
      description: Update authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - email
                - phone_no
                - gender
                - reg_no
                - vit_email
                - hostel_block
                - room_no
                - github_profile
              properties:
                first_name:
                  type: string
                  minLength: 1
                last_name:
                  type: string
                  minLength: 1
                email:
                  type: string
                  format: email
                phone_no:
                  type: string
                  minLength: 10
                  maxLength: 10
                gender:
                  type: string
                  enum: [M, F, O]
                  description: Must be either M, F or O
                reg_no:
                  type: string
                vit_email:
                  type: string
                  format: email
                  pattern: "@vitstudent.ac.in$"
                hostel_block:
                  type: string
                room_no:
                  type: integer
                  minimum: 1
                github_profile:
                  type: string
                  format: uri
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User updated successfully
                  data:
                    type: object
                    properties:
                      first_name:
                        type: string
                      last_name:
                        type: string
                      email:
                        type: string
                        format: email
                      phone_no:
                        type: string
                      gender:
                        type: string
                        enum: [M, F, O]
                      reg_no:
                        type: string
                      vit_email:
                        type: string
                        format: email
                      hostel_block:
                        type: string
                      room_no:
                        type: integer
                      github_profile:
                        type: string
                        format: uri
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                  data:
                    type: object
                    nullable: true
              examples:
                invalidBody:
                  value:
                    status: fail
                    message: Invalid request body
                validationError:
                  value:
                    status: fail
                    message: Validation failed
                    data:
                      first_name: is required
                      email: must be a valid email
                emptyName:
                  value:
                    status: fail
                    message: First name and last name cannot be empty
                invalidGender:
                  value:
                    status: fail
                    message: Gender must be M, F or O
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
                  data:
                    type: object
                    nullable: true
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Failed to update user
                  data:
                    type: object
                    nullable: true
  /panel/createscore:
    post:
      summary: Create a new score
      tags:
        - Panel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                design:
                  type: integer
                  minimum: 0
                  maximum: 10
                  example: 8
                implementation:
                  type: integer
                  minimum: 0
                  maximum: 10
                  example: 7
                presentation:
                  type: integer
                  minimum: 0
                  maximum: 10
                  example: 9
                innovation:
                  type: integer
                  minimum: 0
                  maximum: 10
                  example: 8
                teamwork:
                  type: integer
                  minimum: 0
                  maximum: 10
                  example: 9
                comment:
                  type: string
                  example: "Great teamwork and innovative ideas."
                round:
                  type: integer
                  example: 1
                team_id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
              required:
                - design
                - implementation
                - presentation
                - innovation
                - teamwork
                - round
                - team_id
      responses:
        "200":
          description: Score created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Score created successfully"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Invalid request body or validation error"
                  error:
                    type: string
                    example: "Validation failed: design must be between 0 and 10"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Internal server error"
  /panel/deletescore/{id}:
    delete:
      summary: Delete a score
      tags:
        - Panel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Score deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /panel/getscore/{teamid}:
    get:
      summary: Get score by team ID
      tags:
        - Panel
      parameters:
        - name: teamid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Score retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Scores fetched successfully"
                      scores:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: "550e8400-e29b-41d4-a716-446655440000"
                            team_id:
                              type: string
                              format: uuid
                              example: "550e8400-e29b-41d4-a716-446655440000"
                            design:
                              type: integer
                              minimum: 0
                              maximum: 10
                              example: 8
                            implementation:
                              type: integer
                              minimum: 0
                              maximum: 10
                              example: 7
                            presentation:
                              type: integer
                              minimum: 0
                              maximum: 10
                              example: 9
                            innovation:
                              type: integer
                              minimum: 0
                              maximum: 10
                              example: 8
                            teamwork:
                              type: integer
                              minimum: 0
                              maximum: 10
                              example: 9
                            comment:
                              type: string
                              example: "Great teamwork and innovative ideas."
                            round:
                              type: integer
                              example: 1
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Invalid team ID format"
        "404":
          description: Score not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "No scores found for the given team ID"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Internal server error"
  /panel/updatescore/{id}:
    put:
      summary: Update a score
      tags:
        - Panel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                design:
                  type: integer
                  minimum: 0
                  maximum: 10
                  example: 8
                implementation:
                  type: integer
                  minimum: 0
                  maximum: 10
                  example: 7
                presentation:
                  type: integer
                  minimum: 0
                  maximum: 10
                  example: 9
                innovation:
                  type: integer
                  minimum: 0
                  maximum: 10
                  example: 8
                teamwork:
                  type: integer
                  minimum: 0
                  maximum: 10
                  example: 9
                comment:
                  type: string
                  example: "Great teamwork and innovative ideas."
                round:
                  type: integer
                  example: 1
                team_id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
              required:
                - design
                - implementation
                - presentation
                - innovation
                - teamwork
                - round
                - team_id
      responses:
        "200":
          description: Score updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Score updated successfully"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Invalid request body or validation error"
                  error:
                    type: string
                    example: "Validation failed: design must be between 0 and 10"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "fail"
                  message:
                    type: string
                    example: "Internal server error"
  /panel/getsubmission/{teamId}:
    get:
      summary: Get submission by team ID
      tags:
        - Panel
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Submission retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submissions"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /team/join:
    post:
      summary: Join a team
      description: Allows a user to join a team using a team code.
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JoinTeamRequest"
      responses:
        "200":
          description: Successfully joined the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
  /team/create:
    post:
      summary: Create a team
      description: Allows a user to create a new team.
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamRequest"
      responses:
        "200":
          description: Successfully created the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  team:
                    $ref: "#/components/schemas/Team"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
  /team/leave:
    post:
      summary: Leave a team
      description: Allows a user to leave their current team.
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeaveTeamRequest"
      responses:
        "200":
          description: Successfully left the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /team/kick:
    post:
      summary: Kick a team member
      description: Allows a team leader to remove a member from their team.
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KickMemberRequest"
      responses:
        "200":
          description: Successfully removed the team member.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
  /team/delete:
    post:
      summary: Delete a team
      description: Allows a team leader to delete their team.
      tags:
        - Team
      responses:
        "200":
          description: Successfully deleted the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Team Deleted
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  data:
                    type: string
                    example: Unauthorized or error details
  /team/update:
    put:
      summary: Update team name
      description: Allows a team leader to update their team name.
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTeamNameRequest"
      responses:
        "200":
          description: Successfully updated the team name.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
  /team/users:
    get:
      summary: Get all team users name
      description: Retrieve the first and last name of users in a team.
      tags:
        - Team
      responses:
        "200":
          description: Successfully retrieved team users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        FirstName:
                          type: string
                          description: First name of the team user.
                        LastName:
                          type: string
                          description: Last name of the team user.
        "400":
          description: Failed to retrieve team users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  data:
                    type: string
                    example: Cannot get Members of the team
        "401":
          description: Unauthorized access.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  data:
                    type: string
                    example: unauthorized

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: uuid
        name:
          type: string
        email:
          type: string
        team_id:
          type: uuid
        is_vitian:
          type: boolean
        reg_no:
          type: string
        password:
          type: string
        phone_no:
          type: string
        role:
          type: string
        is_leader:
          type: boolean
        college:
          type: string
        is_verified:
          type: boolean
        is_banned:
          type: boolean
    BanUserReq:
      type: object
      properties:
        email:
          type: string
    Teams:
      type: object
      properties:
        id:
          type: uuid
        name:
          type: string
        number_of_people:
          type: integer
        round_qualified:
          type: integer
        code:
          type: string
    Submission:
      type: object
      properties:
        team_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        track:
          type: string
        github_link:
          type: string
          format: url
        figma_link:
          type: string
          format: url
        ppt_link:
          type: string
          format: url
        other_link:
          type: string
          format: url

    CreateSubmissionRequest:
      type: object
      required:
        - team_id
        - github_link
        - figma_link
      properties:
        team_id:
          type: string
          format: uuid
        github_link:
          type: string
          format: url
        figma_link:
          type: string
          format: url
        ppt_link:
          type: string
          format: url
        other_link:
          type: string
          format: url

    UpdateSubmissionRequest:
      type: object
      required:
        - github_link
        - figma_link
      properties:
        github_link:
          type: string
          format: url
        figma_link:
          type: string
          format: url
        ppt_link:
          type: string
          format: url
        other_link:
          type: string
          format: url

    SubmissionSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            message:
              type: string
              example: "Submission created successfully"

    SubmissionErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: fail
        data:
          type: object
          properties:
            error:
              type: string
              example: "Invalid request parameters"

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [fail]
        data:
          type: object
          properties:
            error:
              type: string

    ValidationErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [fail]
        data:
          type: object
          additionalProperties:
            type: string
          example:
            email: "must be a valid email address"
            password: "is required"

    ConflictErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [fail]
        data:
          type: object
          properties:
            error:
              type: string
              enum:
                - "User with this email already exists"
                - "User with this registration number already exists"

    InternalErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [fail]
        data:
          type: object
          properties:
            error:
              type: string
              enum:
                - "Failed to hash password"
                - "Failed to create user"

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success]
        data:
          type: object
          properties:
            message:
              type: string
              example: "User signed up successfully"
    SignupRequest:
      type: object
      required:
        - user_name
        - email
        - reg_no
        - password
        - phone_no
      properties:
        user_name:
          type: string
          description: User's name
        email:
          type: string
          format: email
          description: Email ending with `@vitstudent.ac.in`
          pattern: '^[a-zA-Z0-9._%+-]+@vitstudent\.ac\.in$'
        reg_no:
          type: string
          description: Registration number
        password:
          type: string
          description: User's password
        phone_no:
          type: string
          description: User's phone number
    SendOTPRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email ending with `@vitstudent.ac.in`
          pattern: '^[a-zA-Z0-9._%+-]+@vitstudent\.ac\.in$'
    VerifyOTPRequest:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          type: string
          format: email
          description: Email ending with `@vitstudent.ac.in`
          pattern: '^[a-zA-Z0-9._%+-]+@vitstudent\.ac\.in$'
        otp:
          type: string
          description: One Time Password (OTP)
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email ending with `@vitstudent.ac.in`
          pattern: '^[a-zA-Z0-9._%+-]+@vitstudent\.ac\.in$'
        password:
          type: string
          description: User's password
    UpdatePasswordRequest:
      type: object
      required:
        - email
        - new_password
        - otp
      properties:
        email:
          type: string
          format: email
          description: Email ending with `@vitstudent.ac.in`
          pattern: '^[a-zA-Z0-9._%+-]+@vitstudent\.ac\.in$'
        new_password:
          type: string
          description: New password
        otp:
          type: string
          description: One Time Password (OTP)
    CreateScore:
      type: object
      required:
        - design
        - implementation
        - presentation
        - round
        - team_id
      properties:
        design:
          type: integer
          minimum: 0
          maximum: 10
        implementation:
          type: integer
          minimum: 0
          maximum: 10
        presentation:
          type: integer
          minimum: 0
          maximum: 10
        round:
          type: integer
        team_id:
          type: string
          format: uuid
    UpdateScore:
      type: object
      required:
        - design
        - implementation
        - presentation
        - round
        - team_id
      properties:
        design:
          type: integer
          minimum: 0
          maximum: 10
        implementation:
          type: integer
          minimum: 0
          maximum: 10
        presentation:
          type: integer
          minimum: 0
          maximum: 10
        round:
          type: integer
        team_id:
          type: string
          format: uuid
    Submissions:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        track:
          type: string
        github_link:
          type: string
        figma_link:
          type: string
        other_link:
          type: string
        team_id:
          type: string
          format: uuid

    Score:
      type: object
      properties:
        design:
          type: integer
        implementation:
          type: integer
        presentation:
          type: integer
        round:
          type: integer
        team_id:
          type: string
          format: uuid
    Response:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          additionalProperties:
            type: string

    CreateIdeaRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        track:
          type: string
        team_id:
          type: string
          format: uuid
        is_selected:
          type: boolean
    UpdateIdeaParams:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        track:
          type: string
        is_selected:
          type: boolean

    GetIdeaByTeamIDRow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        track:
          type: string

    JoinTeamRequest:
      type: object
      properties:
        code:
          type: string
          description: Team code to join.
      required:
        - code
    CreateTeamRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the team to be created.
      required:
        - name
    LeaveTeamRequest:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user leaving the team.
      required:
        - userId
    KickMemberRequest:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user to be kicked.
      required:
        - userId
    UpdateTeamNameRequest:
      type: object
      properties:
        name:
          type: string
          description: New name for the team.
      required:
        - name
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⣶⣿⣿⣿⣿⣿⣿⣤⣧⣤⣤⣤⣀⣀⣀⣀⣀⠂⣦⠤⢤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⣿⣿⣿⡿⠿⠿⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣷⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠏⡴⠋⣄⠀⢠⡆⢠⣴⣿⣿⣿⣿⡿⠟⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠉⠀⠀⠀⠈⠉⠉⠙⠛⠻⠿⣿⣿⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⢿⣰⠏⣠⣾⢏⡴⣿⣿⣿⣿⣿⡿⠟⠁⠀⠀⠀⢀⣠⣤⠤⠂⠐⠀⠂⠐⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠩⢻⣿⣿⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⠟⣁⣴⣿⡵⢋⣴⣿⣿⣿⠿⠋⠀⠀⠀⢀⣴⡿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠂⠀⠐⠀⠐⠀⠂⠐⠀⡀⠈⠈⠻⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⡟⣡⣾⣿⣿⠏⣴⣿⣿⡿⠛⠁⠀⠀⠀⣀⠴⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠢⠤⢔⣈⠀⢀⠐⠀⡀⠅⠻⣿⣷⣴⣦⠀⢄⠘⣆⠰⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⡿⢋⣴⣿⣿⡟⢁⣾⣿⡿⠋⠀⠀⠀⠀⠀⠀⠁⣀⣤⠖⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠒⠤⠀⠀⠄⠀⠈⠛⣿⣿⣧⡈⣧⠘⣆⠹⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⡿⢏⣲⣿⣿⡿⠋⢠⣾⡿⠉⠀⠀⠀⠀⠀⠀⣠⠴⣋⡽⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣆⠙⣧⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣿⣿⡿⣿⣿⣿⡏⠁⣰⡿⠋⠁⠀⠀⢀⠄⢀⡤⠞⣡⠾⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠄⠂⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⡟⢿⣾⣧⡘⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣟⣿⣿⣿⠀⣰⠋⠀⠀⠀⢀⠴⠁⣠⠎⣴⡽⠉⠀⠀⠀⠀⠀⠀⢀⠐⠀⠂⡀⢁⠠⠀⢂⠁⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣎⣿⣿⣷⡘⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢴⣿⣟⡿⣰⣿⣿⣿⣿⣿⣿⡴⠁⠀⠀⠀⠀⠈⣠⢞⣡⡾⠃⠀⠀⠀⠀⠀⡠⠀⡀⠂⠠⢈⠐⠠⢀⠂⡐⢀⠂⡵⡈⠄⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢽⣿⣿⣿⡔⣻⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⢷⣾⢳⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⣠⡾⡑⢎⠌⡁⠠⣴⠀⠀⢀⣼⠃⡐⢠⠁⢂⠌⣉⠒⣀⠂⠤⢡⠈⢷⡱⡈⢆⠐⠠⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠈⢹⣿⣿⣿⣔⢻⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⢫⣿⡷⣹⣿⣿⣿⠟⠁⠀⠀⠀⠀⡤⡴⢏⠴⡑⢎⡰⢁⣲⠏⠀⢀⣾⢃⠰⣈⢧⡃⠬⣘⢬⢣⠐⡌⠒⠤⡉⢾⡵⣉⠦⡘⢄⠈⠄⠐⠀⡀⠈⠀⡀⠐⠀⡀⠂⠁⡀⠌⠀⠂⢀⠀⠀⢀⠠⠁⠂⠄⡀⠀⠀⠀⠀⠘⣿⣿⣿⣻⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⣿⢧⣿⢿⣳⢯⣿⣿⠃⠀⠀⠀⠀⠀⣼⡿⣙⢬⡒⢍⡒⠬⣡⡟⠀⢠⡿⠃⡌⢲⣘⢮⣷⢢⣙⢮⢲⢩⠰⡉⢖⡡⣾⢻⣧⢎⡱⢊⡔⡈⠄⠂⠀⠄⠁⡀⠂⢁⠠⠐⢀⠠⠀⠌⠐⡀⢠⠀⠀⠠⢀⠡⢀⠐⠠⠀⡀⠀⠐⢿⣿⡿⣽⣿⣿⣠⢤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣟⣧⣏⡿⢧⣫⡿⠁⠀⠀⠀⠀⠀⣼⣿⢱⣊⠦⣉⠆⡜⢡⣾⠁⢀⡾⢁⠞⣨⢓⣮⡿⢹⢦⡹⣎⢧⣃⠧⣙⠢⡕⣿⠨⢿⣦⢃⠧⡰⢡⢊⠤⢁⠂⡐⠠⣁⢂⠒⡀⠆⡠⠈⢄⠱⡐⡌⢳⡀⠁⠠⠐⡌⢢⠅⣂⠄⠂⠄⢸⣿⣿⣿⣿⡏⢻⣇⢷⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣽⢲⢩⣿⣳⠟⠀⠀⠀⢀⠀⢀⣼⣿⢣⠳⣌⠓⡤⢋⡔⢣⡇⠀⣼⢃⠎⡼⣡⢟⡾⠁⣾⡆⣟⡼⡳⣜⢢⠥⡓⡜⣿⠀⠙⣿⣏⢖⣡⢃⠎⡔⢢⠘⡠⢁⡔⢪⠜⡰⡡⢆⡍⢢⢣⠵⣩⣍⣷⡀⠁⠄⣇⢣⠚⣔⠢⢈⠠⢘⣿⣿⣿⣿⣏⠼⣯⡟⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⣎⡟⣻⣷⠋⠀⠀⠀⣠⠃⢀⡞⣼⢣⢏⡵⡈⢇⠲⡡⢜⣻⠀⠰⣋⠜⣘⠶⣱⡾⠃⠐⣸⣏⠶⣳⢻⣌⠳⣘⡱⡘⣿⠀⢂⠈⣿⣷⣂⢏⡜⣌⠣⡓⡔⢣⠌⣇⠮⡱⣱⢪⡜⣣⢏⡞⣱⠞⡼⣧⠀⠂⢹⡆⣏⠲⡍⢆⠠⠀⣿⣿⣿⡿⢼⣍⣿⡟⣽⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣻⢽⢣⡿⠁⠀⠀⠀⡴⠁⠠⡟⣼⢇⡏⢮⡐⢭⡈⠧⡑⢮⡇⠐⡰⢡⠞⣡⢛⣾⠁⣴⠁⣞⣯⢚⡽⣷⢎⠷⡑⢦⡙⣯⠰⣄⠀⠈⠛⣷⣎⠴⣌⠣⡕⢬⢃⠞⣌⠶⡱⡱⢦⣙⢦⢫⣜⡱⣫⢷⣹⡆⠐⠘⣷⢌⡳⣙⠎⠤⠑⣿⣿⣿⣹⢳⡞⣼⣻⡽⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣹⢮⡟⠁⠀⠀⢄⡼⠁⠀⣴⣹⣏⠾⣙⠦⣙⠰⣌⢣⡙⣾⠁⠰⣡⢋⡎⡵⣿⠃⡰⠁⠀⢺⣷⣋⣷⣯⡟⢮⡙⢦⠘⣷⠠⠙⣆⠀⠀⠻⣿⣶⣈⠳⣌⢣⠚⡼⣐⠣⠵⡙⢦⡙⣎⠳⣌⢳⡱⣎⢷⣻⡄⠀⢻⢆⡳⣍⢞⡡⢊⣿⣿⣿⢸⣻⢼⣚⡷⣻⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⢷⣽⠋⠠⣔⢲⣏⡾⠁⠀⣼⢣⡿⣜⠯⣜⠲⣡⠳⡌⡖⡥⣿⢀⠳⣰⢃⡞⣽⣏⠀⢁⡀⠀⠸⣿⣬⢻⢻⣽⢣⡝⢢⢉⣯⠇⠀⠈⢣⡀⠀⠈⢟⣧⡳⢌⡲⣉⠖⣡⢋⠵⡙⢦⡹⢌⡳⣜⢣⠳⣍⢾⣱⣷⠀⠈⢎⡴⢭⣚⠔⣩⣿⣟⡳⢬⣳⢏⡾⣱⢯⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡿⢁⡴⢳⡜⣳⡾⠀⢀⣾⢣⣿⡝⣮⢻⣌⠷⣡⢳⡱⣙⢶⡇⢨⢒⡵⢊⣾⠏⠉⠛⠛⠳⢦⣶⣈⣷⣻⡜⣯⠷⣌⠣⠌⣿⠀⠀⠀⠀⠙⢦⠀⠈⢿⣷⣃⠖⣡⠚⡤⢋⠲⣉⠶⣙⠮⣑⠮⡑⠯⡜⣎⢷⣺⣇⠈⢰⢊⡧⢯⡘⠄⣿⢞⡽⢢⡟⣯⢖⣯⡟⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⢏⡴⣫⣜⣧⡟⣼⠁⢠⣻⢯⡿⢧⣻⣜⡳⣎⣟⡱⢯⡜⢧⣾⠁⡇⢎⡴⣻⠧⠀⠀⠀⠀⠀⠀⠀⢙⣿⣾⡇⢻⡟⡴⡁⠎⣟⠀⠀⠀⠀⠀⠀⠳⡄⠀⠛⣷⡎⢥⡙⢤⠉⢖⡡⡚⣬⠣⡝⢲⣉⠗⡹⡜⢮⣳⢿⡀⠈⡞⣜⢧⣙⠰⣫⢾⣝⠣⣟⣽⡚⣼⣻⣽⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣺⡿⣏⣳⢳⡾⣵⣻⠇⢠⣿⢯⣿⢻⡝⡶⣭⢳⡽⣸⡝⣧⡛⣧⡏⣴⠙⢦⣽⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⢻⣧⡇⠘⣿⢥⠃⡌⣿⠀⠀⠀⠀⠀⠀⠀⢈⡷⡾⠛⣿⣲⢘⢢⡙⣄⠲⡑⢦⠛⣜⢣⡌⢏⡱⣍⠳⣭⢿⣧⠀⠱⣎⠿⣤⢃⡯⢷⣫⠳⣽⢶⣫⢗⡷⣻⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣼⣷⣯⣷⣹⡟⣽⣳⢯⡏⢀⣽⢯⣿⣏⢷⣹⢳⣭⢳⡳⢧⣛⢶⡹⣾⠃⠦⡙⣦⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣷⠀⢸⣧⢋⠄⣿⠆⠀⠀⠀⠀⠀⠀⠉⠁⠈⠀⢩⣿⣎⠖⣰⠢⡑⣌⢣⡛⣬⠲⣍⠎⡕⢮⡹⣜⢫⣾⡆⠱⣘⡟⣦⠡⣿⡱⣯⠳⣽⠾⣥⣻⡝⣿⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣨⡿⠟⠉⣾⣳⣽⢳⡿⣽⡟⢀⣾⣿⣿⣿⠱⣞⢧⡟⣼⡳⣝⣻⢼⣣⢟⡿⢀⠣⣴⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⡀⠀⢹⡎⡄⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⠻⣮⡑⢎⡱⣀⠣⣙⢦⡛⣤⠛⣬⢃⠷⣸⠹⣞⣿⡄⢣⢟⡦⢃⣷⣹⢳⠏⣞⣟⣧⢳⣟⣽⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠞⠋⠀⠀⢰⣯⡗⣿⣹⣟⣾⠃⣼⣿⣿⣿⢣⡻⣝⣮⢻⡵⣻⢼⣣⢟⡼⣫⣏⠐⣲⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠿⣆⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢙⢿⣆⡱⢢⠑⡘⣦⠝⣦⠛⣤⠫⡜⢥⡛⡼⣺⢷⣡⣛⢾⡡⢚⣧⢻⡍⣿⢺⡜⣯⢞⣾⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⢷⣻⢧⡟⣾⡇⣸⣿⣿⣿⠃⣎⢷⣻⢞⣯⣳⡽⢧⣛⣮⣝⣿⠃⣸⣿⣿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠿⣶⡡⢓⠤⠸⣏⠶⣙⢆⡳⢩⢲⠹⣔⢫⢿⡷⣎⡷⣅⠻⣎⠳⣍⡾⣏⡿⣸⣻⢞⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣟⣯⡞⢧⣛⡿⢰⣿⣿⣿⠇⢎⡽⢾⣽⣻⢮⣷⢻⣏⢷⡞⣾⣯⢠⡿⠉⠛⠻⠿⣿⣿⣷⣦⣀⠀⠀⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢷⣍⢢⢁⠸⣷⢩⠖⣍⠳⣌⠳⡌⠣⢏⣿⣻⣵⠣⠜⡧⢘⢧⣻⡽⣞⡵⢯⣯⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣟⠶⣯⡹⣽⢃⣿⣿⣿⠃⡜⡸⣼⣟⡷⣯⣟⣾⡻⣼⣛⣾⣳⢿⡞⠀⠀⠀⠀⠀⠀⠈⠙⠻⣿⣿⣦⣄⡈⠓⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⠀⣀⣠⣤⣤⣾⣿⣧⣊⠄⢻⣇⠻⣌⠳⣌⠳⣘⠀⡏⡼⣧⢿⣏⠘⡇⣍⢲⣽⢳⡯⢼⡻⢶⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡽⣛⢦⢻⡏⣾⣿⣿⡓⢈⠖⣱⢻⣾⣻⢷⣻⢾⡽⣳⣻⠶⣏⣿⡟⠀⢠⣶⣶⣶⣶⣿⣾⣷⣾⣿⣿⣿⣿⣷⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡞⠉⣁⣠⣴⣶⣿⣿⣿⡿⠿⠿⠟⠛⠛⢿⣬⣴⢿⡗⣬⠳⣌⠳⡌⢳⡟⢴⣻⣿⣯⠂⡇⣜⢺⡼⣯⡽⢺⡽⣏⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⢳⡽⢣⣿⣼⣿⣿⢣⡍⢢⣽⠾⢿⣷⢿⣻⢯⣯⢟⡷⣽⡻⣭⣿⣷⠀⠈⠿⠟⠛⠛⠉⠉⠉⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣾⣿⣿⣿⣿⣿⣉⣁⠀⠀⠀⠀⠀⠀⠀⠀⣻⣿⣎⣿⢆⡻⠤⣷⠾⢧⡽⠸⣷⣹⣿⡧⠐⣼⢣⠿⣵⡻⢭⣷⢫⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⢯⡳⣭⣹⢷⣿⡟⣧⠳⡄⣳⠇⠀⣸⣿⡿⣯⣟⡾⢯⣟⣳⣽⡳⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠻⠿⣿⣿⣿⣶⣦⣄⡀⠀⢰⣿⣯⢿⣺⡿⣜⣱⣯⠀⠘⢿⡅⢿⣳⡞⣧⠑⣮⢳⣛⣷⢫⡗⡾⣏⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢏⡷⡣⢽⣿⡿⢱⣋⢗⢸⡏⠀⠀⢾⣿⣿⣳⢯⣟⣿⢞⣧⢷⣛⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⠿⠟⠀⢠⣿⢷⣻⢯⣳⢻⡿⣖⣿⡀⠀⢻⣟⢸⣷⣻⣝⠢⣝⣣⢟⡼⢯⡼⣻⡵⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣟⢯⣞⢇⣿⡟⡼⢣⡏⣎⣸⠃⠀⠀⣻⣿⣷⣻⣟⣾⣟⡽⣞⢯⣯⢿⡟⠉⢱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣟⣿⡽⣻⣼⣿⠓⠽⣿⡃⠀⠘⣿⡌⣷⣳⡞⡧⢸⢎⣻⢼⣳⢹⢧⣛⣾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⢏⡾⣜⢺⢧⡻⣅⢻⡜⣤⡏⠀⠀⠀⣿⣿⣳⣟⣾⠋⠹⣾⡽⣫⣞⣿⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⣿⢺⣿⡟⠻⢿⡷⠀⠀⠻⣷⠀⠀⠻⣷⣘⢧⡿⣱⢩⡎⢷⣫⢞⡥⢿⡹⢾⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢐⣿⢫⡞⡵⢊⡷⣣⠇⣯⠜⣾⠁⠀⠀⣀⣿⣿⣳⡿⠁⠀⢰⣿⣳⢟⡾⣿⣄⠀⠀⠈⢣⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⠻⣿⢧⣿⣟⣧⡄⢄⠀⠀⠀⠀⣹⠀⠀⠘⣿⡼⣹⢞⡽⡢⣝⣣⢟⡾⣘⢷⡻⣭⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣏⢷⡹⠖⣹⠺⣥⠛⣦⢻⣇⠂⠀⠀⣾⣿⣿⠟⠀⠀⢀⣏⣿⡽⢾⡽⣿⠹⢷⣄⠀⠀⠙⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⠄⡩⢉⠆⡩⢉⠛⣙⣻⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠞⠀⢠⣟⣾⠿⣼⡿⡇⠀⠀⠀⠀⠀⢸⡀⠀⠀⢻⣷⡹⣞⡽⣳⠸⣬⣛⢶⡩⣞⣵⢳⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣺⡝⣮⢳⢍⡳⢻⠴⣋⠶⣿⠖⠀⠀⢰⣿⡿⠋⠀⠀⠀⡾⠀⢺⡿⣭⣟⡿⠀⠈⠹⢷⣤⣀⣤⣤⣄⣀⣀⣀⡀⠀⠀⠀⠀⠈⢷⣄⠣⠘⠄⢣⢘⣴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠴⠋⠀⢀⣿⣿⣯⣛⣾⠁⠸⡆⠀⢀⡀⠀⠀⡇⠀⠀⠐⣿⡗⣽⢺⡵⢃⢧⣛⢮⡱⣏⡞⣧⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡝⢶⣋⠦⣛⢧⡛⢬⣳⡟⠁⠀⠀⣿⠟⠁⠀⠀⠀⣸⠁⠀⠐⣿⣳⢞⣟⠀⠀⠀⠀⠙⠻⠿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣶⣤⡀⠈⠓⠳⠾⠒⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠴⠚⠁⠀⠀⠀⡼⢹⣿⡖⡿⠁⠀⠀⢳⡀⠀⠱⠀⠀⢻⠀⠀⠀⢹⡿⣌⠇⣟⢆⡻⣜⢧⡃⡿⣜⢧⢿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⡿⣜⢧⡫⢔⡏⢶⡙⣲⣽⠇⠀⠀⢀⣾⠁⢠⠂⠀⢠⠏⠀⠀⠀⢿⡽⣞⡯⠀⠀⠀⠀⠀⠀⠀⠈⠛⣿⣿⣿⣴⣿⣿⣽⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⠾⠿⠿⠶⠦⠤⠄⠀⠘⠡⣿⣗⡿⠁⠀⠀⠀⠀⢧⠀⠀⢣⠀⠈⣇⠀⠀⠈⢿⣎⡇⣺⠠⣻⡜⣮⡑⣟⡼⣋⣾⡅⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡷⠭⠶⣹⣤⠿⠷⠯⡼⠋⠀⠀⠀⣺⡧⠀⠂⡀⢀⡟⠀⠀⠀⠀⠘⣿⣹⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⡝⠛⢟⡛⠛⠛⢋⡀⠀⠀⠀⠀⠀⠀⢀⣀⠤⠒⣸⠟⢋⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⡟⠁⠀⠀⠀⠀⠀⠘⡆⠀⠈⠂⠀⢹⡀⠀⠀⠈⢻⡥⠶⠷⣴⣟⠲⠅⣿⣶⣙⠶⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣟⣥⠼⠴⠏⠀⠀⠀⠠⠞⠀⠀⠀⠀⠀⠀⠀⢛⠉⡿⠁⠀⠀⠀⠀⠀⠽⣗⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠓⣤⢬⡙⢦⣄⠀⠈⠓⠲⠤⠒⠊⠉⠁⢀⡴⠞⣡⠶⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⢹⡖⠙⠤⠀⠀⠁⠀⠀⠀⠘⢦⡀⠀⠐⢮⠷⠮⠴⣌⡝⢿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⢻⡏⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢫⢳⡀⠂⠀⠀⠀⠀⠀⠀⣻⣟⠀⠀⠀⠀⠀⠀⠀⠀⢀⡼⢀⠈⠉⣶⡝⢂⠈⠓⠦⣄⡀⠀⠀⣠⡴⠞⠋⡠⠞⢁⠂⠙⡀⠢⢄⠀⠀⠀⠀⠀⠀⣤⡿⠁⠀⠀⠀⠀⠀⠀⠀⢀⣄⣶⠻⠁⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⠀⠈⢧⠀⠀⢨⣿⡈⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⠸⡇⢾⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⡂⣼⣦⡀⠀⠀⠀⠈⣿⡀⠀⠀⠀⠀⢀⣤⣾⠉⡰⠃⠀⠀⠈⠙⠀⠀⠀⠀⢨⡝⢦⠞⡁⠀⠀⠀⠀⠀⠀⠀⠀⠈⠠⠀⢷⣄⣀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⢀⣠⣞⢻⠵⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⣟⠇⣸⡆⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⠀⣸⣇⠈⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠿⣇⠙⠷⣄⡀⠀⠘⠀⠀⠀⠀⠀⣿⣧⢸⡄⠃⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠙⣦⡆⣰⠀⠀⠀⠀⠀⠀⣠⡀⠀⠀⠀⣿⣌⠿⡄⠀⠀⠀⠀⠀⠀⠀⣀⡴⠛⢡⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⠏⢀⡿⡇⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣦⡈⢻⣆⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣿⣷⣦⡈⠹⢦⡀⠀⠀⠀⠀⠀⣾⡟⠹⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣨⠿⠻⠛⠛⠳⢯⡃⠀⠀⢀⣾⡏⢙⡦⣀⢀⡿⠼⣷⠀⠀⠀⠀⠀⠀⣤⠞⢉⣠⣾⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⡿⠃⣠⣿⣟⣷⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣷⣤⡈⠻⢦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⣿⣿⣿⣿⣦⡈⠹⣆⠀⠀⢀⣼⣻⠇⢹⣿⡄⠀⠀⠀⠀⠀⠀⢠⣾⡏⢀⠐⡀⢂⠐⡀⢿⡄⠀⣾⡟⠘⠉⢰⠏⣾⡇⠸⣿⣷⠀⠀⠀⣰⡿⠉⣠⣾⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣶⠿⠋⣀⣶⣿⣿⣿⣾⣇⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣶⣄⡉⠻⢦⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣦⠈⢳⣄⠘⣯⠏⠀⠈⣿⣷⡀⠀⠀⠀⢀⣴⢾⣫⡅⣀⠂⡔⢂⠐⠠⣍⣻⢦⣀⠙⠲⢤⠏⣰⣿⠀⠀⢻⣿⡗⢀⣼⠋⢠⣾⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣰⡾⠾⠋⣡⣴⣾⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣈⠙⠻⢶⣤⣄⡀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠻⣾⠏⠁⠀⠀⠘⣿⣷⣶⡶⠿⠋⢁⠈⢿⣷⡄⠬⠐⠦⢌⣼⠿⠉⠳⠯⣟⡟⢶⡿⣿⠉⢀⠀⠀⠻⣧⣾⠃⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡐⡀⠀⢀⢀⣄⣤⡶⠿⠛⢁⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣄⣉⠛⢷⣶⣦⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡾⣽⣿⠀⣿⣦⠀⠀⠂⠀⠀⠀⠈⠁⢀⠈⠄⡈⠄⣿⡟⠠⢁⠂⡜⣿⠁⠀⠀⠄⠈⠉⠉⠀⠐⠀⠈⡀⠀⢠⣿⡇⣼⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⡿⠟⢋⣥⣴⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀
# ⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣦⣍⡲⢩⠹⣙⣛⣛⣛⡟⠻⢳⠛⡛⠛⠦⣩⡟⠀⠀⠄⠁⠀⠀⠀⠈⠀⠌⠂⠄⠀⣸⡇⠡⢂⠂⡔⣯⣀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⢼⣯⠑⠛⡛⣛⠛⣛⠻⣛⣛⡛⡭⢛⡱⢣⣜⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀
# ⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣬⣶⣬⣁⣣⣄⣡⣦⣾⠏⠁⠀⠀⠂⠀⠀⠀⠀⠀⠈⠀⠡⠀⠀⣿⡇⠱⠠⡑⠰⣿⡅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠿⣦⣴⣤⣍⣤⣣⣶⣤⣷⣾⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀
# ⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡅⣿⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⣿⡇⢑⠢⢡⢃⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡇⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀
# ⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⢀⠃⢆⠣⢎⣽⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⣷⡇⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀
# ⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⢀⡼⣿⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⡌⡘⢢⡙⢆⢾⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣻⡷⣄⠀⠘⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀
# ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢏⡄⠀⠀⣸⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡏⠴⡉⢆⡱⢊⠾⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠢⡀⠀⠀⢻⣷⣏⠀⠀⠀⠙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷
# ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠏⠀⠀⢧⠀⣺⣟⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣇⢣⢉⠖⡌⡱⢊⡇⠀⠀⠀⢰⣆⣀⣀⣠⣄⣤⢠⣄⣠⣿⠀⠀⠈⢿⣟⣦⠀⢰⠇⠀⠉⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
# ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⢸⣢⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⡃⢆⠎⡰⢁⠧⣩⣧⠀⠀⠀⠀⠙⠶⠶⠒⠒⠛⠒⠛⠷⠇⠀⠀⠀⠘⣿⣧⡀⡿⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
# ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⣿⣵⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡘⢤⢂⡕⣊⠖⣡⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣆⠀⠀⠀⠀⠹⣷⣿⡇⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
# ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⢀⣽⣿⡇⠀⠀⠀⠠⢌⡐⠤⣀⠄⡀⢀⠀⣄⠠⠀⠀⠀⠀⣿⠱⣊⠖⡌⢦⡙⡔⣻⡄⠀⠀⠀⠀⡀⠄⢠⠀⡔⣠⢊⡕⡸⠆⠀⠀⠀⠀⢸⡷⣆⠀⠀⠀⠀⠀⠀⠀⠈⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
# ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⠟⠁⡀⠀⢨⡑⢮⡜⣧⢓⡮⣑⢮⡱⢎⡱⢡⢂⡆⢼⣿⢱⡘⣜⡘⠢⡜⡰⣹⢇⠰⣀⠎⡱⡌⢧⢣⡝⡴⢣⡳⢮⡵⣋⡄⠀⠀⠀⢸⣷⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
